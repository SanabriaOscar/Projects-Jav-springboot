{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ClienteService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.urlEndPoint = 'http://localhost:8080/api/clientes';\n    this.httpHeadres = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  /* getClientes():Cliente[]{\r\n     return CLIENTES;\r\n  \n   }*/\n  /*-----------Codigo que funciona sin el paginador----------------------\r\n   getClientes():Observable<Cliente[]>{\r\n     //return of (CLIENTES);\r\n     return this.http.get(this.urlEndPoint).pipe(\r\n       map((response)=>response as Cliente[])\r\n     );\r\n  \n   }*/\n  /*---------codigo del tuturial-----------\r\n  getClientes(page: number): Observable<any[]> {\r\n    return this.http.get(this.urlEndPoint+'/page'+page).pipe(\r\n      tap((response: any) => {\r\n        (response.content as Cliente[]).forEach(cliente => {\r\n          console.log(cliente.nombre);\r\n        });\r\n      }),\r\n      map((response: any) => {\r\n        let clientes = response as Cliente[];\r\n        return clientes.map(cliente => {\r\n          cliente.nombre = cliente.nombre;\r\n          return cliente;\r\n        });\r\n        return response;\r\n      }),\r\n      tap((response: any) => {\r\n        (response.content as Cliente[]).forEach(cliente=> {\r\n          console.log(cliente.nombre);\r\n        });\r\n      })\r\n    );\r\n  }*/\n  /* create(cliente: Cliente): Observable<Cliente> {\r\n     // return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres});\r\n      return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres}).pipe(\r\n       catchError(e=>{\r\n         //this.router.navigate(['/clientes']);\r\n         console.log(e.error.mensaje);\r\n         Swal.fire('Error al crear al cliente ', e.error.error, \"error\");\r\n         return throwError(e);\r\n  \n       })\r\n     \r\n      );\r\n     }*/\n  getClientes(page) {\n    return this.http.get(`${this.urlEndPoint}/page/${page}`).pipe(map(response => {\n      let clientes = response.content;\n      return clientes.map(cliente => {\n        cliente.nombre = cliente.nombre;\n        return cliente;\n      });\n    }));\n  }\n  create(cliente) {\n    // Verificar si los campos están vacíos\n    // if (!cliente.nombre || !cliente.apellido || !cliente.email) {\n    // Mostrar mensaje de error con SweetAlert\n    // Swal.fire('Error', 'Por favor completa todos los campos', 'error');\n    // Devolver un Observable que emita un error\n    // return throwError('Campos vacíos');\n    //}\n    return this.http.post(this.urlEndPoint, cliente, {\n      headers: this.httpHeadres\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      // this.router.navigate(['/clientes']);\n      console.log(e.error.error);\n      Swal.fire('Error al crear al cliente', e.error.error, 'error');\n      return throwError(e);\n    }));\n  }\n  getCliente(id) {\n    // return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`);\n    return this.http.get(`${this.urlEndPoint}/${id}`).pipe(catchError(e => {\n      this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al editar el cliente', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n  update(cliente) {\n    //return this.http.put<Cliente>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres});\n    return this.http.put(`${this.urlEndPoint}/${cliente.id}`, cliente, {\n      headers: this.httpHeadres\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      //this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al actualizar al cliente ', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n  delete(id) {\n    //  return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres});\n    return this.http.delete(`${this.urlEndPoint}/${id}`, {\n      headers: this.httpHeadres\n    }).pipe(catchError(e => {\n      //this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al eliminar al cliente ', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n}\nClienteService.ɵfac = function ClienteService_Factory(t) {\n  return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nClienteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClienteService,\n  factory: ClienteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","map","catchError","HttpHeaders","Swal","ClienteService","constructor","http","router","getClientes","page","get","urlEndPoint","pipe","response","clientes","content","cliente","nombre","create","post","headers","httpHeadres","e","status","console","log","error","fire","getCliente","id","navigate","mensaje","update","put","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Oscar Jesus Sanabria\\Documents\\GitHub\\Projects-Jav-springboot\\Full-curso-bdb-angular-spring-all\\4-Cambio-formato-java-error2\\clientes-app\\src\\app\\clientes\\cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CLIENTES } from './clientes.json';\nimport { Cliente } from './cliente';\nimport { Observable, throwError } from 'rxjs';\nimport { of } from 'rxjs';\nimport { map, catchError, tap} from 'rxjs/operators';\nimport { HttpClient, HttpHandler, HttpHeaders} from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n  private urlEndPoint:string='http://localhost:8080/api/clientes';\n  private httpHeadres= new HttpHeaders({'Content-Type':'application/json'});\n\n  constructor(private http: HttpClient, private router: Router) { }\n /* getClientes():Cliente[]{\n    return CLIENTES;\n\n  }*/\n /*-----------Codigo que funciona sin el paginador----------------------\n  getClientes():Observable<Cliente[]>{\n    //return of (CLIENTES);\n    return this.http.get(this.urlEndPoint).pipe(\n      map((response)=>response as Cliente[])\n    );\n\n  }*/\n  /*---------codigo del tuturial-----------\n  getClientes(page: number): Observable<any[]> {\n    return this.http.get(this.urlEndPoint+'/page'+page).pipe(\n      tap((response: any) => {\n        (response.content as Cliente[]).forEach(cliente => {\n          console.log(cliente.nombre);\n        });\n      }),\n      map((response: any) => {\n        let clientes = response as Cliente[];\n        return clientes.map(cliente => {\n          cliente.nombre = cliente.nombre;\n          return cliente;\n        });\n        return response;\n      }),\n      tap((response: any) => {\n        (response.content as Cliente[]).forEach(cliente=> {\n          console.log(cliente.nombre);\n        });\n      })\n    );\n  }*/\n    \n /* create(cliente: Cliente): Observable<Cliente> {\n    // return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres});\n     return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres}).pipe(\n      catchError(e=>{\n        //this.router.navigate(['/clientes']);\n        console.log(e.error.mensaje);\n        Swal.fire('Error al crear al cliente ', e.error.error, \"error\");\n        return throwError(e);\n\n      })\n    \n     );\n    }*/\n    getClientes(page: number): Observable<any> {\n      return this.http.get<any>(`${this.urlEndPoint}/page/${page}`).pipe(\n        map(response => {\n          let clientes = response.content as Cliente[];\n          return clientes.map(cliente => {\n            cliente.nombre = cliente.nombre;\n            return cliente;\n          });\n        })\n      );\n    }\n    \n    create(cliente: Cliente): Observable<any> {\n      // Verificar si los campos están vacíos\n     // if (!cliente.nombre || !cliente.apellido || !cliente.email) {\n        // Mostrar mensaje de error con SweetAlert\n       // Swal.fire('Error', 'Por favor completa todos los campos', 'error');\n        // Devolver un Observable que emita un error\n       // return throwError('Campos vacíos');\n      //}\n      return this.http.post<any>(this.urlEndPoint, cliente, { headers: this.httpHeadres }).pipe(\n        catchError(e => {\n          if(e.status==400){\n            return throwError(e);\n          }\n          // this.router.navigate(['/clientes']);\n          console.log(e.error.error);\n          Swal.fire('Error al crear al cliente', e.error.error, 'error');\n          return throwError(e);\n        })\n      );\n    } \n\n getCliente(id: any):Observable<Cliente>{\n     // return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`);\n      return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`).pipe(\n        catchError(e=>{\n          this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al editar el cliente', e.error.mensaje, \"error\");\n          return throwError(e);\n        })\n      );\n    }\n\n    update(cliente:Cliente):Observable<any>{\n      //return this.http.put<Cliente>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres});\n      return this.http.put<any>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres}).pipe(\n        catchError(e=>{\n            if(e.status==400){\n              return throwError(e);\n            }\n          //this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al actualizar al cliente ', e.error.mensaje, \"error\");\n          return throwError(e);\n  \n        })\n       );\n    }\n    delete(id:number):Observable<Cliente>{\n    //  return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres});\n      return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres}).pipe(\n        catchError(e=>{\n          //this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al eliminar al cliente ', e.error.mensaje, \"error\");\n          return throwError(e);\n  \n        })\n       );\n    }\n    }\n\n\n  \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}