{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ClienteService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.urlEndPoint = 'http://localhost:8080/api/clientes';\n    this.httpHeadres = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  /* getClientes():Cliente[]{\r\n     return CLIENTES;\r\n  \n   }*/\n  /*-----------Codigo que funciona sin el paginador----------------------*/\n  getClientes() {\n    //return of (CLIENTES);\n    return this.http.get(this.urlEndPoint).pipe(map(response => response));\n  }\n  //---------codigo del tuturial-----------\n  /* getClientes(page: number): Observable<any[]> {\r\n     return this.http.get(this.urlEndPoint+'/page'+page).pipe(\r\n       tap((response: any) => {\r\n         (response.content as Cliente[]).forEach(cliente => {\r\n           console.log(cliente.nombre);\r\n         });\r\n       }),\r\n       map((response: any) => {\r\n         let clientes = response as Cliente[];\r\n         return clientes.map(cliente => {\r\n           cliente.nombre = cliente.nombre;\r\n           return cliente;\r\n         });\r\n         return response;\r\n       }),\r\n       tap((response: any) => {\r\n         (response.content as Cliente[]).forEach(cliente=> {\r\n           console.log(cliente.nombre);\r\n         });\r\n       })\r\n     );\r\n   }*/\n  /* create(cliente: Cliente): Observable<Cliente> {\r\n     // return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres});\r\n      return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres}).pipe(\r\n       catchError(e=>{\r\n         //this.router.navigate(['/clientes']);\r\n         console.log(e.error.mensaje);\r\n         Swal.fire('Error al crear al cliente ', e.error.error, \"error\");\r\n         return throwError(e);\r\n  \n       })\r\n     \r\n      );\r\n     }*/\n  create(cliente) {\n    return this.http.post(this.urlEndPoint, cliente, {\n      headers: this.httpHeaders\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      if (e.status == 500) {\n        return throwError(e);\n      }\n      console.log(e.error.error);\n      Swal.fire('Error al crear al cliente', e.error.error, 'error');\n      return throwError(e);\n    }));\n  }\n  getCliente(id) {\n    // return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`);\n    return this.http.get(`${this.urlEndPoint}/${id}`).pipe(catchError(e => {\n      this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al editar el cliente', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n  update(cliente) {\n    //return this.http.put<Cliente>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres});\n    return this.http.put(`${this.urlEndPoint}/${cliente.id}`, cliente, {\n      headers: this.httpHeadres\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      //this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al actualizar al cliente ', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n  delete(id) {\n    //  return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres});\n    return this.http.delete(`${this.urlEndPoint}/${id}`, {\n      headers: this.httpHeadres\n    }).pipe(catchError(e => {\n      //this.router.navigate(['/clientes']);\n      console.log(e.error.mensaje);\n      Swal.fire('Error al eliminar al cliente ', e.error.mensaje, \"error\");\n      return throwError(e);\n    }));\n  }\n}\nClienteService.ɵfac = function ClienteService_Factory(t) {\n  return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nClienteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClienteService,\n  factory: ClienteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","map","catchError","HttpHeaders","Swal","ClienteService","constructor","http","router","getClientes","get","urlEndPoint","pipe","response","create","cliente","post","headers","httpHeaders","e","status","console","log","error","fire","getCliente","id","navigate","mensaje","update","put","httpHeadres","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Oscar Jesus Sanabria\\Documents\\GitHub\\Projects-Jav-springboot\\Full-curso-bdb-angular-spring-all\\4-Cambio-formato-java-error2\\clientes-app\\src\\app\\clientes\\cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CLIENTES } from './clientes.json';\nimport { Cliente } from './cliente';\nimport { Observable, throwError } from 'rxjs';\nimport { of } from 'rxjs';\nimport { map, catchError, tap} from 'rxjs/operators';\nimport { HttpClient, HttpHandler, HttpHeaders} from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n  private urlEndPoint:string='http://localhost:8080/api/clientes';\n  private httpHeadres= new HttpHeaders({'Content-Type':'application/json'});\n\n  constructor(private http: HttpClient, private router: Router) { }\n /* getClientes():Cliente[]{\n    return CLIENTES;\n\n  }*/\n /*-----------Codigo que funciona sin el paginador----------------------*/\n  getClientes():Observable<Cliente[]>{\n    //return of (CLIENTES);\n    return this.http.get(this.urlEndPoint).pipe(\n      map((response)=>response as Cliente[])\n    );\n\n  }\n//---------codigo del tuturial-----------\n /* getClientes(page: number): Observable<any[]> {\n    return this.http.get(this.urlEndPoint+'/page'+page).pipe(\n      tap((response: any) => {\n        (response.content as Cliente[]).forEach(cliente => {\n          console.log(cliente.nombre);\n        });\n      }),\n      map((response: any) => {\n        let clientes = response as Cliente[];\n        return clientes.map(cliente => {\n          cliente.nombre = cliente.nombre;\n          return cliente;\n        });\n        return response;\n      }),\n      tap((response: any) => {\n        (response.content as Cliente[]).forEach(cliente=> {\n          console.log(cliente.nombre);\n        });\n      })\n    );\n  }*/\n    \n /* create(cliente: Cliente): Observable<Cliente> {\n    // return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres});\n     return this.http.post<Cliente>(this.urlEndPoint,cliente,{headers:this.httpHeadres}).pipe(\n      catchError(e=>{\n        //this.router.navigate(['/clientes']);\n        console.log(e.error.mensaje);\n        Swal.fire('Error al crear al cliente ', e.error.error, \"error\");\n        return throwError(e);\n\n      })\n    \n     );\n    }*/\n    \n  \n    create(cliente: Cliente): Observable<any> {\n      return this.http.post<any>(this.urlEndPoint, cliente, { headers: this.httpHeaders }).pipe(\n        catchError(e => {\n          if (e.status == 400) {\n            return throwError(e);\n          }\n          if (e.status == 500) {\n            return throwError(e);\n          }\n          console.log(e.error.error);\n          Swal.fire('Error al crear al cliente', e.error.error, 'error');\n          return throwError(e);\n        })\n      );\n    }\n    \n\n getCliente(id: any):Observable<Cliente>{\n     // return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`);\n      return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`).pipe(\n        catchError(e=>{\n          this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al editar el cliente', e.error.mensaje, \"error\");\n          return throwError(e);\n        })\n      );\n    }\n\n    update(cliente:Cliente):Observable<any>{\n      //return this.http.put<Cliente>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres});\n      return this.http.put<any>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeadres}).pipe(\n        catchError(e=>{\n            if(e.status==400){\n              return throwError(e);\n            }\n          //this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al actualizar al cliente ', e.error.mensaje, \"error\");\n          return throwError(e);\n  \n        })\n       );\n    }\n    delete(id:number):Observable<Cliente>{\n    //  return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres});\n      return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`,{headers: this.httpHeadres}).pipe(\n        catchError(e=>{\n          //this.router.navigate(['/clientes']);\n          console.log(e.error.mensaje);\n          Swal.fire('Error al eliminar al cliente ', e.error.mensaje, \"error\");\n          return throwError(e);\n  \n        })\n       );\n    }\n    }\n\n\n  \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}